# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RyYFabTe4vnzVN_kgJ4-M8QzNBc23563
"""

# -- coding: utf-8 --
"""phase 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bKc8YgekoOxZPnSq7L3217qsFErb9F1M
"""

1. Create Tables for Customer Churn Analysis
sql
Copy
Edit
-- CUSTOMER PROFILE
CREATE TABLE customers (
    customer_id      NUMBER PRIMARY KEY,
    name             VARCHAR2(100),
    age              NUMBER,
    gender           VARCHAR2(10),
    region           VARCHAR2(50),
    join_date        DATE
);

-- SERVICE USAGE DATA
CREATE TABLE usage_data (
    usage_id         NUMBER PRIMARY KEY,
    customer_id      NUMBER REFERENCES customers(customer_id),
    avg_call_duration NUMBER,
    data_usage_gb     NUMBER,
    monthly_bill      NUMBER,
    late_payments     NUMBER
);

-- SUPPORT INTERACTIONS
CREATE TABLE support_tickets (
    ticket_id        NUMBER PRIMARY KEY,
    customer_id      NUMBER REFERENCES customers(customer_id),
    ticket_date      DATE,
    issue_type       VARCHAR2(50)
);

-- CHURN LABELS
CREATE TABLE churn_data (
    customer_id      NUMBER PRIMARY KEY REFERENCES customers(customer_id),
    churned          CHAR(1) CHECK (churned IN ('Y', 'N'))
);
üìù 2. Sample Data Insertion
sql
Copy
Edit
INSERT INTO customers VALUES (1, 'Alice', 30, 'F', 'East', TO_DATE('2020-01-15','YYYY-MM-DD'));
INSERT INTO customers VALUES (2, 'Bob', 45, 'M', 'West', TO_DATE('2019-07-23','YYYY-MM-DD'));

INSERT INTO usage_data VALUES (101, 1, 12.5, 30.1, 55.0, 1);
INSERT INTO usage_data VALUES (102, 2, 8.0, 20.5, 40.0, 3);

INSERT INTO support_tickets VALUES (201, 1, TO_DATE('2023-01-20','YYYY-MM-DD'), 'Billing');
INSERT INTO support_tickets VALUES (202, 2, TO_DATE('2023-03-10','YYYY-MM-DD'), 'Technical');

INSERT INTO churn_data VALUES (1, 'N');
INSERT INTO churn_data VALUES (2, 'Y');
üëÅ 3. Create a View to Export for Machine Learning
sql
Copy
Edit
CREATE OR REPLACE VIEW churn_features AS
SELECT
    c.customer_id,
    c.age,
    c.gender,
    c.region,
    ROUND(MONTHS_BETWEEN(SYSDATE, c.join_date)) AS tenure_months,
    u.avg_call_duration,
    u.data_usage_gb,
    u.monthly_bill,
    u.late_payments,
    (SELECT COUNT(*) FROM support_tickets st WHERE st.customer_id = c.customer_id) AS ticket_count,
    cd.churned
FROM
    customers c
JOIN
    usage_data u ON c.customer_id = u.customer_id
JOIN
    churn_data cd ON c.customer_id = cd.customer_id;
You can now query this view in Python (using cx_Oracle or SQLAlchemy) to feed into your machine learning model.

üì§ 4. Export Data to Python (Example Python snippet)
python
Copy
Edit
import cx_Oracle
import pandas as pd

conn = cx_Oracle.connect("user/password@host:port/service_name")
query = "SELECT * FROM churn_features"
df = pd.read_sql(query, conn)
df.to_csv("churn_data.csv", index=False)